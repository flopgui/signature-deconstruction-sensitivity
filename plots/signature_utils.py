import itertools
from collections import defaultdict

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


def mut_key_generator():
    """

    Returns:
        Generates all possible lex sortable mutation keys
        1st component: substitution;
        2nd component: flanks

    """
    subs = ['CA', 'CG', 'CT', 'TA', 'TC', 'TG']
    for s in sorted(subs):
        for c in sorted(itertools.product(set('ACGT'), repeat=2)):
            yield tuple([s, ''.join(c)])


def minor_tick_labels():
    major_labels = ['C>A', 'C>G', 'C>T', 'T>A', 'T>C', 'T>G']
    flanks = ['AA', 'AC', 'AG', 'AT', 'CA', 'CC', 'CG', 'CT',
              'GA', 'GC', 'GG', 'GT', 'TA', 'TC', 'TG', 'TT']
    minor_labels = []
    for subs in major_labels:
        for flank in flanks:
            minor_labels.append(flank[0] + subs[0] + flank[1])
    return minor_labels


def plot_signature(profile, title=None, ax=None, ymax=0.3):
    """
    Args:
        profile: signature-like object in lexicographic order
        title: string
        ymax: float

    Returns:
        produces the signature bar plot
    """

    total = sum(profile.values())
    if abs(total - 1) > 0.01:
        profile = defaultdict(int, {k: v / total for k, v in profile.items()})
    sns.set(font_scale=1.5)
    sns.set_style('white')
    vector = np.array([profile[k] for k in sorted(mut_key_generator())])

    # bar plot
    barlist = ax.bar(range(96), vector)
    color_list = ['#72bcd4', 'k', 'r', '#7e7e7e', 'g', '#e6add8']
    for category in range(6):
        for i in range(16):
            barlist[category * 16 + i].set_color(color_list[category])
    ax.set_xlim([-0.5, 96])
    ax.set_ylim([0, ymax])

    # ax.set_ylabel('subs rel freq')
    labels = ['C>A', 'C>G', 'C>T', 'T>A', 'T>C', 'T>G']
    major_ticks = np.arange(8, 8 + 16 * 5 + 1, 16)
    minor_ticks = np.arange(0.2, 96.2, 1)
    ax.tick_params(length=0, which='major', pad=20, labelsize=12)
    ax.tick_params(length=0, which='minor', pad=5, labelsize=6)
    ax.set_xticks(major_ticks, minor=False)
    ax.set_xticklabels(labels, minor=False)
    ax.set_xticks(minor_ticks, minor=True)
    ax.set_xticklabels(minor_tick_labels(), minor=True, rotation=90)
    ax.set_title(title, fontsize=24)


if __name__ == '__main__':

    fig, ax = plt.subplots(figsize=(10,4))
    # uniform = {k: 1 / 96 for k in mut_key_generator()}
    sign = {"A[C>A]A": 0.00116025223883672, "A[C>A]C": 0.0206044794138246, "A[C>A]G": 3.34072627389194e-05, "A[C>A]T": 0.00797173305476611, "A[C>G]A": 0.000406088283592853, "A[C>G]C": 0.000506110028320157, "A[C>G]G": 1.77038488167328e-05, "A[C>G]T": 0.000431093719774679, "A[C>T]A": 0.022404870818916, "A[C>T]C": 0.0398086544014669, "A[C>T]G": 0.000440095676800136, "A[C>T]T": 0.0352076541440109, "A[T>A]A": 0.0133028920487314, "A[T>A]C": 0.00401087196356488, "A[T>A]G": 0.00501108941083792, "A[T>A]T": 0.0068514895138203, "A[T>C]A": 0.0116025223883672, "A[T>C]C": 0.00351076323992836, "A[T>C]G": 0.0085618613486572, "A[T>C]T": 0.0027005871076372, "A[T>G]A": 0.00120026093672764, "A[T>G]C": 0.00040508806614558, "A[T>G]G": 0.000637138513912925, "A[T>G]T": 0.000911198094465737, "C[C>A]A": 0.0116025223883672, "C[C>A]C": 0.0328071322705556, "C[C>A]G": 0.00188040880087331, "C[C>A]T": 0.0211045881374611, "C[C>G]A": 0.00426092632538314, "C[C>G]C": 0.00662143950094751, "C[C>G]G": 0.000470102200218327, "C[C>G]T": 0.00684148733934757, "C[C>T]A": 0.0187040662640058, "C[C>T]C": 0.0481104592138331, "C[C>T]G": 0.00192041749876423, "C[C>T]T": 0.0329071540152829, "C[T>A]A": 0.0126027398356403, "C[T>A]C": 0.00172037400930962, "C[T>A]G": 0.0149032399643683, "C[T>A]T": 0.00757164607585689, "C[T>C]A": 0.00354076976334655, "C[T>C]C": 0.00313068060996461, "C[T>C]G": 0.00356077411229201, "C[T>C]T": 0.00324070452916464, "C[T>G]A": 0.000870189179127542, "C[T>G]C": 0.000753163737796597, "C[T>G]G": 0.00568123510051085, "C[T>G]T": 0.00348075671651017, "G[C>A]A": 0.00771167651847512, "G[C>A]C": 0.0268058275869174, "G[C>A]G": 0.00106023049410942, "G[C>A]T": 0.018103935795642, "G[C>G]A": 0.00240052187345529, "G[C>G]C": 0.00142030877512771, "G[C>G]G": 0.000223048490741887, "G[C>G]T": 0.00277060232894631, "G[C>T]A": 0.033607306228374, "G[C>T]C": 0.152033051985502, "G[C>T]G": 0.00455098938509232, "G[C>T]T": 0.0865188091891177, "G[T>A]A": 0.0120026093672764, "G[T>A]C": 0.00184040010298239, "G[T>A]G": 0.0077716895653115, "G[T>A]T": 0.00325070670363737, "G[T>C]A": 0.00582126554312908, "G[T>C]C": 0.00331071975047375, "G[T>C]G": 0.00321069800574645, "G[T>C]T": 0.00239051969898256, "G[T>G]A": 0.00114024788989126, "G[T>G]C": 7.05153300327491e-05, "G[T>G]G": 0.000410089153381945, "G[T>G]T": 0.000920200051491194, "T[C>A]A": 0.00510110898109249, "T[C>A]C": 0.054011742152744, "T[C>A]G": 0.000904196572334826, "T[C>A]T": 0.0273059363105539, "T[C>G]A": 0.000559121553025628, "T[C>G]C": 0.00187040662640058, "T[C>G]G": 0.000207045011585519, "T[C>G]T": 0.000381082847411027, "T[C>T]A": 0.00482104809585604, "T[C>T]C": 0.0327071105258283, "T[C>T]G": 0.000364079150807386, "T[C>T]T": 0.0151032834538229, "T[T>A]A": 0.00850184830182082, "T[T>A]C": 0.00226049143083706, "T[T>A]G": 0.00533115899396529, "T[T>A]T": 0.00352076541440109, "T[T>C]A": 0.00682148299040211, "T[T>C]C": 0.0030306588652373, "T[T>C]G": 0.00341074149520106, "T[T>C]T": 0.00236051317556437, "T[T>G]A": 0.00115025006436399, "T[T>G]C": 0.000274059580552812, "T[T>G]G": 0.00293063712051, "T[T>G]T": 0.00174037835825508}
    # sign = [99,77,51,87,30,18,13,57,115,68,204,94,33,31,21,62,102,50,55,69,16,8,18,24,82,49,36,91,25,16,26,24,74,135,166,112,31,43,22,37,58,37,42,44,13,11,11,24,54,47,14,35,17,32,12,17,198,177,266,112,23,24,20,19,48,37,43,46,11,17,10,19,69,79,52,126,44,21,28,71,105,124,119,113,53,41,26,72,71,53,50,59,22,17,20,55]
    # sign2 = {"A[C>A]A":77.011124967542,"A[C>A]C":55.9699818166244,"A[C>A]G":6.59065492813905,"A[C>A]T":50.5525475182029,"A[C>G]A":31.5878469115447,"A[C>G]C":19.682094610061,"A[C>G]G":10.058532562188,"A[C>G]T":27.3529038236026,"A[C>T]A":57.0296487512517,"A[C>T]C":42.8296268131937,"A[C>T]G":236.136881419058,"A[C>T]T":61.0201809313482,"A[T>A]A":28.8641395886852,"A[T>A]C":20.8364931275507,"A[T>A]G":22.9445320601961,"A[T>A]T":59.2454704218228,"A[T>C]A":62.1839829171501,"A[T>C]C":31.2342465971123,"A[T>C]G":40.6988375472637,"A[T>C]T":75.906947719191,"A[T>G]A":13.6798348875603,"A[T>G]C":8.21756785947227,"A[T>G]G":17.0009703146224,"A[T>G]T":16.6419867685776,"C[C>A]A":51.2050708153924,"C[C>A]C":24.5185099273487,"C[C>A]G":6.97898943064587,"C[C>A]T":91.0038544007142,"C[C>G]A":20.0228459521075,"C[C>G]C":20.1013455347327,"C[C>G]G":8.9962896784819,"C[C>G]T":30.9509990664622,"C[C>T]A":46.3663439992377,"C[C>T]C":112.841856214562,"C[C>T]G":119.021912753611,"C[C>T]T":114.628624732599,"C[T>A]A":15.9650291202532,"C[T>A]C":19.9812838555924,"C[T>A]G":23.2601816200504,"C[T>A]T":27.6393029797949,"C[T>C]A":12.3153189898236,"C[T>C]C":25.0307211449694,"C[T>C]G":23.2971129480072,"C[T>C]T":26.8093719251334,"C[T>G]A":6.69896355312463,"C[T>G]C":10.1209866241222,"C[T>G]G":17.6565572598232,"C[T>G]T":0.023769248120508,"G[C>A]A":75.0496652272186,"G[C>A]C":43.6113790127185,"G[C>A]G":4.58060839789862,"G[C>A]T":53.6495384889699,"G[C>G]A":14.4730954843758,"G[C>G]C":23.8647527836687,"G[C>G]G":3.82217253926798,"G[C>G]T":21.2865509781118,"G[C>T]A":29.8572597858506,"G[C>T]C":46.7024824882826,"G[C>T]G":140.201462559746,"G[C>T]T":41.9769952985785,"G[T>A]A":6.10719719993304,"G[T>A]C":8.82517233293825,"G[T>A]G":11.6452848462606,"G[T>A]T":15.874912607948,"G[T>C]A":18.3500881843942,"G[T>C]C":14.5386132421145,"G[T>C]G":18.4279181620301,"G[T>C]T":33.3306974762492,"G[T>G]A":6.21265074059104,"G[T>G]C":5.63938345764806,"G[T>G]G":13.0063723861294,"G[T>G]T":4.4394304449839,"T[C>A]A":69.3920900030363,"T[C>A]C":49.7611225287424,"T[C>A]G":7.75906264097208,"T[C>A]T":112.347354943359,"T[C>G]A":37.7506177916807,"T[C>G]C":30.4637257478989,"T[C>G]G":6.29466898082546,"T[C>G]T":57.8162545512057,"T[C>T]A":83.2549361406404,"T[C>T]C":55.0577935102056,"T[C>T]G":76.1745443137918,"T[C>T]T":97.1256949997909,"T[T>A]A":41.4751236070395,"T[T>A]C":16.7303625814332,"T[T>A]G":11.1543532340733,"T[T>A]T":45.7321292820048,"T[T>C]A":11.6464649747742,"T[T>C]C":34.2014246501274,"T[T>C]G":15.3157182019872,"T[T>C]T":67.8677071518377,"T[T>G]A":8.16086345816163,"T[T>G]C":11.3881873984768,"T[T>G]G":21.6959597014269,"T[T>G]T":29.2478788439298}
    # sign = {k:v for k,v in zip(sign2.keys(), sign)}
    # sign=sign2
    # sign = {(k[1:3], k[0]+k[3]): v/sum(sign.values()) for k, v in sign.items()}
    def convert_params(mu, theta):
        r = theta
        var = mu + 1 / r * mu ** 2
        p = (var - mu) / var
        return r, 1 - p
    from scipy.stats import nbinom
    sign = {k: nbinom.rvs(*convert_params(x*10000, 10)) for k, x in sign.items()}
    print(sign)
    sign = {(k[2]+k[4], k[0]+k[6]): v/sum(sign.values()) for k, v in sign.items()}
    plot_signature(sign, ax=ax)
    plt.show()
